.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Buckley::PrimerDesigner 3"
.TH Buckley::PrimerDesigner 3 "2011-03-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Buckley::PrimerDesigner \- Primer design with bells on.
.SH "VERSION"
.IX Header "VERSION"
version 0.001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $pd = Buckley::PrimerDesigner->new();
.Ve
.PP
.Vb 1
\&  $pd->primer3->set_parameters(PARAMNAME=>$paramvalue);
.Ve
.PP
.Vb 3
\&  $pd->seq_fetcher($sf);
\&  $pd->register_pre_process($preproc);
\&  $pd->register_post_process($postproc);
.Ve
.PP
.Vb 1
\&  my $PDres = $pd->design(@seqs);
.Ve
.Sh "primer3"
.IX Subsection "primer3"
.Vb 3
\&  The instance of Bio::Tools::Run::Primer3Redux that will
\&  be used to design the primers. See that module's docs for
\&  full details, but in brief:
.Ve
.PP
.Vb 2
\&  $pd->program_name('my_oddlynamed_p3_binary');  
\&  $pd->program_dir('/path/to/said/binary');
.Ve
.PP
.Vb 1
\&  my $current_p3_params = $pd->primer3->get_parameters;
.Ve
.PP
.Vb 3
\&  $pd->primer3->set_parameters(PARAMNAME => $value, OTHER_PARAMNAME => $other_value);
\&  my $val = $pd->primer3->PARAMNAME;
\&  $pd->primer3->PARAMNAME($value);
.Ve
.Sh "seq_fetcher"
.IX Subsection "seq_fetcher"
Specify a function to be used to fetch sequences.
.PP
If this is undefined then \->design(@seqs) expects \f(CW@seqs\fR to be an 
array of Bio::Seq objects.
.PP
If you have defined a seq_fetcher then its \->fetch method will be 
called for each value of \f(CW@seqs\fR to create an array of Bio::Seq objects.
.Sh "register_pre_process"
.IX Subsection "register_pre_process"
.Vb 2
\&  Register a process to be run on each sequence prior to running
\&  primer3.
.Ve
.PP
.Vb 1
\&  Processes will be run in the order in which they are defined.
.Ve
.PP
.Vb 2
\&  When registering a process, a name must be supplied.
\&  A optional description of the process may also be supplied.
.Ve
.PP
.Vb 3
\&  A Process should be a subclass of Buckley::PrimerDesigner::PreProcess. 
\&  It should take a Bio::Seq object as a parameter, do something to it 
\&  and return a Bio::Seq object or undef:
.Ve
.PP
.Vb 8
\&    my $pre_process = Buckley::PrimerDesigner::PreProcess->new(
\&                          process =>sub {my $seq = shift;
\&                                            ... do some stuff ...
\&                                         return $modified_seq;
\&                                         },
\&                          name => "proc name",
\&                          description => "proc description");
\&    $obj->register_pre_process($pre_process)
.Ve
.Sh "registered_pre_processes"
.IX Subsection "registered_pre_processes"
Returns an array of registered pre-process objects
.PP
my \f(CW$preprocs\fR = \f(CW$obj\fR\->registered_pre_processes;
.Sh "register_post_process"
.IX Subsection "register_post_process"
.Vb 2
\&  Register a process to be run on each sequence prior to running
\&  primer3.
.Ve
.PP
.Vb 1
\&  Processes will be run in the order in which they are defined.
.Ve
.PP
.Vb 2
\&  When registering a process, a name must be supplied.
\&  A optional description of the process may also be supplied.
.Ve
.PP
.Vb 5
\&  A Process should be a subclass of Buckley::PrimerDesigner::PostProcess. 
\&  It should take a Bio::Seq object as a parameter, with Primer SeqFeatures 
\&  attached. It should do something to the primers and return the Bio::Seq.
\&  It can return a sequence with no primers attached, but it should not
\&  return undef.
.Ve
.PP
.Vb 8
\&    my $post_process = Buckley::PrimerDesigner::PostProcess->new(
\&                          process =>sub {my $seq = shift;
\&                                            ... do some stuff ...
\&                                         return $modified_seq;
\&                                         },
\&                          name => "proc name",
\&                          description => "proc description");
\&    $obj->register_post_process($post_process)
.Ve
.Sh "registered_post_processes"
.IX Subsection "registered_post_processes"
Returns an array of registered post-process objects
.PP
my \f(CW$preprocs\fR = \f(CW$obj\fR\->registered_pre_processes;
.Sh "design"
.IX Subsection "design"
Runs pre\-processing, primer3 and post-processing on the given sequences.
.PP
.Vb 1
\&  my $primers = $pd->design(@seqs);
.Ve
.PP
By default, \f(CW@seqs\fR is expected to be an arrayref of Bio::Seq objects.
.PP
Alternatively you can use a seq_fetcher function to resolve an arrayref of
something else into an array of Bio::Seq objects.
.PP
You can use a predefined SeqFetcher, For example:
.PP
.Vb 3
\&  use Buckley::PrimerDesigner::SeqFetcher::Ensembl::GeneID;
\&  $pd->seq_fetcher(Buckley::PrimerDesigner::SeqFetcher::Ensembl->by_gene_id(-species => 'mouse', -foo => 'bar'));
\&  $pd->design(@ensembl_ids);
.Ve
.PP
Or you can define your own function
.PP
.Vb 6
\&  my $subref = sub {
\&    my @seqs = @_;
\&    ... convert @seqs to Bio::Seq objects somehow ...
\&    return @bioseqs;
\&  }
\&  $pd->seq_fetcher($subref);
.Ve
.PP
\&\f(CW\*(C`design\*(C'\fR Returns a Buckley::PrimerDesigner::Result object.
.PP
my \f(CW$get_from_ensembl\fR = sub {my \f(CW$id\fR = shift; ... fetch from ensembl... ; return \f(CW$bioseq_obj\fR;}
\&\f(CW$pd\fR\->seq_fetcher($get_from_ensembl);
\&\f(CW$pd\fR\->design(@ensembl_ids);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Basically a wrapper around Chris Fields's Primer3Redux wrapper
to design primers for multiple sequences, with hooks for
pre-processing of sequences and post\- processing of primers
.SH "NAME"
Buckley::PrimerDesigner \- Primer3 with bells on.
.SH "AUTHOR"
.IX Header "AUTHOR"
Cass Johnston <cassjohnston@gmail.com>
.SH "AUTHOR"
.IX Header "AUTHOR"
Cass Johnston <cassjohnston@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Cass Johnston.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
